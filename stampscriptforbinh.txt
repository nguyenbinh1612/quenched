import astropy
from astropy.io import fits
import astropy.units as u
from astropy.coordinates import SkyCoord
from astropy.wcs import WCS
from astropy.nddata.utils import Cutout2D
from astropy.stats import sigma_clipped_stats
from reproject import reproject_interp
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import warnings
from astropy.utils.exceptions import AstropyWarning
warnings.simplefilter('ignore', category=AstropyWarning)
warnings.simplefilter('ignore', category=UserWarning)

##### READ IN BIG IMAGES

# cutout will be cutout_width X cutout_width in size
cutout_width = 6*u.arcsec

# Spitzer
ch1 = fits.open('/Users/al54599/Science/COSMOS_DATA/irac.1.mosaic.Fconv_resamp015.fits')[0]
# ch2 = fits.open('/Users/al54599/Science/COSMOS_DATA/irac.2.mosaic.Fconv_resamp015.fits')[0]

# HST
f125w = fits.open('/Users/al54599/Science/COSMOS_DATA/hlsp_candels_hst_wfc3_cos-tot_f125w_v1.0_drz.fits')[0]
f160w = fits.open('/Users/al54599/Science/COSMOS_DATA/hlsp_candels_hst_wfc3_cos-tot_f160w_v1.0_drz.fits')[0]
del f125w.header['A_0_2']
del f125w.header['B_0_2']
del f125w.header['A_1_1']
del f125w.header['B_1_1']
del f125w.header['A_2_0']
del f125w.header['B_2_0']
del f125w.header['A_0_3']                                                  
del f125w.header['B_0_3']                                               
del f125w.header['A_1_2']                                                 
del f125w.header['B_1_2']                                                
del f125w.header['A_2_1']                                                  
del f125w.header['B_2_1']                                                     
del f125w.header['A_3_0']                                                     
del f125w.header['B_3_0']                                                   
del f125w.header['A_0_4']                                                      
del f125w.header['B_0_4']                                                     
del f125w.header['A_1_3']                                                      
del f125w.header['B_1_3']                                                      
del f125w.header['A_2_2']                                                      
del f125w.header['B_2_2']                                                      
del f125w.header['A_3_1']                                                    
del f125w.header['B_3_1']                                                     
del f125w.header['A_4_0']                                                      
del f125w.header['B_4_0']
del f125w.header['A_ORDER']
del f125w.header['B_ORDER']

del f160w.header['A_0_2']
del f160w.header['B_0_2']
del f160w.header['A_1_1']
del f160w.header['B_1_1']
del f160w.header['A_2_0']
del f160w.header['B_2_0']
del f160w.header['A_0_3']                                                  
del f160w.header['B_0_3']                                               
del f160w.header['A_1_2']                                                 
del f160w.header['B_1_2']                                                
del f160w.header['A_2_1']                                                  
del f160w.header['B_2_1']                                                     
del f160w.header['A_3_0']                                                     
del f160w.header['B_3_0']                                                   
del f160w.header['A_0_4']                                                      
del f160w.header['B_0_4']                                                     
del f160w.header['A_1_3']                                                      
del f160w.header['B_1_3']                                                      
del f160w.header['A_2_2']                                                      
del f160w.header['B_2_2']                                                      
del f160w.header['A_3_1']                                                    
del f160w.header['B_3_1']                                                     
del f160w.header['A_4_0']                                                      
del f160w.header['B_4_0']
del f160w.header['A_ORDER']
del f160w.header['B_ORDER']

#COSMOS combined
izyjhks = fits.open('/Users/al54599/Science/COSMOS_DATA/COSMOS2020_izYJHKs_chimean-v3_p3.fits')[0]

# Conversion factor for ACS imaging from e/s into Jy
from astropy.constants import c
f814w = fits.open('/Users/al54599/Science/COSMOS_DATA/acs_60mas_mosaic_bkgsub.fits')[0]
acs_conversion = (7.0723600E-20*u.erg/u.cm**2/u.angstrom * (7973.39*u.angstrom)**2/c).to(u.Jy*u.s).value

# Conversion factor for NIRCam imaging from MJy/sr to Jy
pixel_area = ((30e-3*u.arcsec)**2).to(u.sr).value
nircam_conversion_30 = pixel_area*1e6
pixel_area = ((60e-3*u.arcsec)**2).to(u.sr).value
nircam_conversion_60 = pixel_area*1e6

#IRAC conversion factors
irac_zeropoint = 27
irac_conversion = 3631*np.power(10., -0.4*irac_zeropoint)




##### MAKE STAMPS


mora_coords = SkyCoord(ra=mora['ra'].values*u.deg, dec=mora['dec'].values*u.deg)
names = mora['name']
j = 0

for name, coord, zspec in zip(names, mora_coords, mora['z']):
    print(name)

    cutouts = []
    filter_names = []
    
    izyjhks_cutout = Cutout2D(izyjhks.data, coord, cutout_width, wcs=WCS(izyjhks.header)) #combined COSMOS2020 image
    ch1_cutout = Cutout2D(ch1.data*irac_conversion, coord, cutout_width, wcs=WCS(ch1.header)) #spitzer IRAC channel 1
    # ch2_cutout = Cutout2D(ch2.data*irac_conversion, coord, cutout_width, wcs=WCS(ch2.header))
    
    filter_names.extend(['izyjhks'])
    cutouts.extend([izyjhks_cutout])
    
    tile = get_tile(coord) #get COSMOS-Web JWST tile
    
    #open relevant
    if any(L in tile for L in ('A', 'J')):
        f115w = fits.open('/Users/al54599/Science/COSMOS_DATA/cweb_tiles/mosaic_nircam_f115w_COSMOS-Web_60mas_'+tile+'_v0_2_i2d.fits')[1]
        f150w = fits.open('/Users/al54599/Science/COSMOS_DATA/cweb_tiles/mosaic_nircam_f150w_COSMOS-Web_60mas_'+tile+'_v0_2_i2d.fits')[1]
        f277w = fits.open('/Users/al54599/Science/COSMOS_DATA/cweb_tiles/mosaic_nircam_f277w_COSMOS-Web_60mas_'+tile+'_v0_2_i2d.fits')[1]
        f444w = fits.open('/Users/al54599/Science/COSMOS_DATA/cweb_tiles/mosaic_nircam_f444w_COSMOS-Web_60mas_'+tile+'_v0_2_i2d.fits')[1]
        # f777w =  add one for MIRI F770W
    else: # B tiles were named slightly differently so I had to create an if then loop
        f115w = fits.open('/Users/al54599/Science/COSMOS_DATA/cweb_tiles/mosaic_nircam_f115w_COSMOS-Web_60mas_'+tile+'_sci.fits')[0]
        f150w = fits.open('/Users/al54599/Science/COSMOS_DATA/cweb_tiles/mosaic_nircam_f150w_COSMOS-Web_60mas_'+tile+'_sci.fits')[0]
        f277w = fits.open('/Users/al54599/Science/COSMOS_DATA/cweb_tiles/mosaic_nircam_f277w_COSMOS-Web_60mas_'+tile+'_sci.fits')[0]
        f444w = fits.open('/Users/al54599/Science/COSMOS_DATA/cweb_tiles/mosaic_nircam_f444w_COSMOS-Web_60mas_'+tile+'_sci.fits')[0]
    	# f777w =  add one for MIRI F770W

    # the try except conditions tells the code to skip certain images if your source is not fully covered by them
    # the below are going in order of increasing wavelength
    
    try:
        f115w_cutout = Cutout2D(f115w.data*nircam_conversion_60, coord, cutout_width, wcs=WCS(f115w.header))
        filter_names.extend(['F115W'])
        cutouts.extend([f115w_cutout])
    except:
        print('no C-Web imaging', name)
    
    try:
        f125w_cutout = Cutout2D(f125w.data, coord, cutout_width, wcs=WCS(f125w.header))
        f125w_cutout_reproject, _ = reproject_interp((f125w_cutout.data,f125w_cutout.wcs), f115w_cutout.wcs, 
                                              shape_out=np.shape(f115w_cutout.data))
        f125w_cutout.data = f125w_cutout_reproject
        f125w_cutout.wcs = f115w_cutout.wcs
        
        filter_names.extend(['F125W'])
        cutouts.extend([f125w_cutout])

    except:
        print('no WFC3 imaging', name)
        
    try:
        f150w_cutout = Cutout2D(f150w.data*nircam_conversion_60, coord, cutout_width, wcs=WCS(f150w.header))
        filter_names.extend(['F150W'])
        cutouts.extend([f150w_cutout])
    except:
        z123 = 1 # this is a dummy output, since by this point we'll know if there's no Cweb imaging for this source from one of the earlier try excepts
    
    try:
        f160w_cutout = Cutout2D(f160w.data, coord, cutout_width, wcs=WCS(f160w.header))
        
        f160w_cutout_reproject, _ = reproject_interp((f160w_cutout.data,f160w_cutout.wcs), f115w_cutout.wcs, 
                                              shape_out=np.shape(f115w_cutout.data))
        f160w_cutout.data = f160w_cutout_reproject
        f160w_cutout.wcs = f115w_cutout.wcs
        
        filter_names.extend(['F160W'])
        cutouts.extend([f160w_cutout])
    except:
        z123 = 1 # this is a dummy output, since by this point we'll know if there's no Cweb imaging for this source from one of the earlier try excepts

    try:
        f277w_cutout = Cutout2D(f277w.data*nircam_conversion_60, coord, cutout_width, wcs=WCS(f277w.header))
        f444w_cutout = Cutout2D(f444w.data*nircam_conversion_60, coord, cutout_width, wcs=WCS(f444w.header))
        filter_names.extend(['F277W', 'Ch1', 'F444W'])
        cutouts.extend([f277w_cutout, ch1_cutout, f444w_cutout])
    except:
        filter_names.extend(['Ch1'])
        cutouts.extend([ch1_cutout])
    
    # Drop empty cutouts
    N_before = len(cutouts)
    N_after = 0.
    while N_before > N_after:
        N_before = len(cutouts)
        for cutout, flt in zip(cutouts, filter_names):
            if (pd.isna(cutout.data[0][0]) == True):
                index = cutouts.index(cutout)
                cutouts.remove(cutout)
                filter_names.pop(index)

            if (cutout.data[0][0] == 0) == True:
                index = cutouts.index(cutout)
                cutouts.remove(cutout)
                filter_names.pop(index)
            N_after = len(cutouts)

    N = len(cutouts)
    fig, axes = plt.subplots(1,N, figsize=(1.3*N,2), constrained_layout=True)
    # axes[0].text(0.1, 0.1, r'z = '+redshift, fontsize = 12, color = 'white', transform=axes[0].transAxes, fontweight = 'semibold')
    for i in range(N):
        ax = axes[i]
        
        if i == 0:
            if zspec > 0:
                ax.text(0.08,0.1,r'z$_s$ = '+'{:.2f}'.format(zuse),transform=ax.transAxes,fontweight='bold',size=14, color='lightgreen')
            else:
                ax.text(0.08,0.1,r'z$_p$ = '+'{:.2f}'.format(zuse),transform=ax.transAxes,fontweight='bold',size=14, color='lightgreen')
            ax.text(-0.2, 0.2, name, transform=ax.transAxes, rotation=90, fontweight='semibold', size=12)

        cutout = cutouts[i]
        _, _, std = sigma_clipped_stats(cutout.data, sigma=3.)
        
        
        # define extent in arcsec from center, so everything lines up even if pixel scales are different
        size = np.shape(cutout.data)[0]/2
        pixel_scale = cutout.wcs.proj_plane_pixel_scales()[0].to(u.arcsec).value
        extent = [-size*pixel_scale, size*pixel_scale, -size*pixel_scale, size*pixel_scale]
        
        # we plot the SNR, but you can modify this to plot the flux in Jy (its already converted)
        # just provide a common vmin and vmax to use
        vmin, vmax = -3, 10
        ax.imshow(cutout.data/std, vmin=vmin, vmax=vmax, cmap='Greys_r', origin='lower', extent=extent)
        # dark green, moss, mint, light purple, light salmon, dark salmon
        # plot the little red indicators on each image
        ax.plot([0.1*cutout_width.to(u.arcsec).value,0.15*cutout_width.to(u.arcsec).value],[0]*2, color='lightgreen')
        ax.plot([0]*2, [-0.1*cutout_width.to(u.arcsec).value,-0.15*cutout_width.to(u.arcsec).value], color='lightgreen')
        
        # labels / limits
        ax.set_title(filter_names[i])
        ax.axis('off')
    j += 1
        
    
    plt.savefig(f'./cutout_plots/{name}.pdf')
    # plt.savefig(f'./cutout_keep/{name}.pdf')
    # plt.savefig(f'./cutout_?/{name}.pdf')
    # print(r'\includegraphics[trim=0cm 0cm 0cm 0cm, width=1\textwidth]{figures/final_sample_cutouts_'+id_number+'.pdf}')
    plt.show()
